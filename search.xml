<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git 的日常使用</title>
      <link href="/2023/01/10/git-%E7%9A%84%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/10/git-%E7%9A%84%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="库上代码下载到本地–怎么再次进行提交"><a href="#库上代码下载到本地–怎么再次进行提交" class="headerlink" title="库上代码下载到本地–怎么再次进行提交"></a>库上代码下载到本地–怎么再次进行提交</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">cherry pick 到本地之后<br>使用<br>git log查看日志<br>回到刚才commit信息的上一笔的commit<br>git reset commitID<br></code></pre></td></tr></table></figure><h3 id="如何让同一工程下的多个上库链接只跑一次门禁"><a href="#如何让同一工程下的多个上库链接只跑一次门禁" class="headerlink" title="如何让同一工程下的多个上库链接只跑一次门禁"></a>如何让同一工程下的多个上库链接只跑一次门禁</h3><p><mark>在commit的时候加上 同一个change-Id,在这里要注意–一定也要加上 change_Id</mark></p><h3 id="如何快速的追加代码以及将代码添加到工作区"><a href="#如何快速的追加代码以及将代码添加到工作区" class="headerlink" title="如何快速的追加代码以及将代码添加到工作区"></a>如何快速的追加代码以及将代码添加到工作区</h3><ol><li><p>如果当前的 仓库 git status 下已修改的都是要推上库的代码，那么可以使用 </p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git add -A<br></code></pre></td></tr></table></figure></li><li><p>如果要给已上库的代码修改了之后，进行追加怎么办</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">通过git <span class="hljs-built_in">log</span> 查看有没有自己的commit信息<br>如果有可以使用 <br>git commit --amend来进行对应的追加<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git 常用命令与技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尽可能的使用const</title>
      <link href="/2022/12/03/%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8const/"/>
      <url>/2022/12/03/%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8const/</url>
      
        <content type="html"><![CDATA[<h2 id="const-语法的使用"><a href="#const-语法的使用" class="headerlink" title="const 语法的使用"></a><mark><strong>const 语法的使用</strong></mark></h2><ol><li>如果关键字const出现在*左边表示所指之物为常量</li><li>如果关键字出现在*右边，表示指针自身式常量</li><li>如果出现在*两边，表示被指物和指针两者都是常量</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> gretting [] = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">char</span>* p = gretting; <span class="hljs-comment">//non -const pointer,non -const data</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* p=gretting;<span class="hljs-comment">//non -const pointer ,const data</span><br><span class="hljs-type">char</span>* <span class="hljs-type">const</span> p=gretting;<span class="hljs-comment">//const pointer , non const data</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> p=gretting;<span class="hljs-comment">//const pinter,const data</span><br></code></pre></td></tr></table></figure><h2 id="const-成员函数"><a href="#const-成员函数" class="headerlink" title="const 成员函数"></a>const 成员函数</h2><ol><li><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>使得class的接口比较容易理解，可以得知那个函数可以改动对象，哪个函数不行</li><li>他们使得 <mark>操作const 对象成为可能</mark></li></ol></li></ol><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><p><mark>令函数返回一个常量值，往往可以降低因客户错误而造成的意外，而又不至于放弃安全性和高效性</mark></p><p>举例说明</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rational</span>&#123;&#125;;<br><span class="hljs-type">const</span> Rational <span class="hljs-keyword">operator</span>* (<span class="hljs-type">const</span> Rational &amp;lhs, <span class="hljs-type">const</span> Rational &amp;rhs);<br>Rational a,b,c;<br>(a * b)=c;<br></code></pre></td></tr></table></figure><p>当用户在这里想进行比较的时候，而进行了一个赋值操作，如果不加const 则这个操作则不会产生错误，而我们自己写的类与内置类型要保持一致，所以在这里我们需要加上 <mark>const</mark>加以限制</p>]]></content>
      
      
      <categories>
          
          <category> effective C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高效开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条款02</title>
      <link href="/2022/11/20/%E6%9D%A1%E6%AC%BE02/"/>
      <url>/2022/11/20/%E6%9D%A1%E6%AC%BE02/</url>
      
        <content type="html"><![CDATA[<p>尽量以const,enum,inline替换 #define Perfer const ,enums,and inlines to #defines</p><hr><p><strong>编译器替换预处理器</strong> </p><p>define 不被视为语言的一部分–编译出错时，对于值得追踪将会变得非常困难</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ASPECT_RATIO 1.635  </span><br></code></pre></td></tr></table></figure><p><em>这个记号的名称从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。于是记号名称 ASPECT_RATIO有可能没有进入到记号表（symbol table内）</em></p><h3 id="当用常量替换-define时，两种特殊得情况"><a href="#当用常量替换-define时，两种特殊得情况" class="headerlink" title="当用常量替换 #define时，两种特殊得情况"></a>当用常量替换 #define时，两种特殊得情况</h3><h4 id="第一种-常量指针"><a href="#第一种-常量指针" class="headerlink" title="第一种:常量指针"></a>第一种:常量指针</h4><p>定义常量指针(constant pointer) <em>由于常量定义式通常被放在头文件内 以便 被不同得源码包含，因此有必要将指针（而不是指针所指之物）声明为const</em></p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//在头文件内定义一个常量得 char *based字符串，const必须写两次</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> authorName =<span class="hljs-string">&quot;Scott Meyers&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="第二种：class专属常量"><a href="#第二种：class专属常量" class="headerlink" title="第二种：class专属常量"></a>第二种：class专属常量</h4><p>为了将常量得作用域（scope）限制于class内，必须让它成为class得一个成员（member）,而为确保此常量至多只有一份实体，必须让其成为一个static成员</p><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePlayer</span>&#123;<br>    priveate:<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> NumTurns =<span class="hljs-number">5</span>;<span class="hljs-comment">//常量声明式</span><br>    <span class="hljs-type">int</span> scores[NumTurns];<span class="hljs-comment">//使用该常量</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><mark>无法利用define创建一个class 专属常量，因为#define并不重视作用域。一旦宏被定义，它就在其后得编译过程中有效（除非在某处undef）</mark></p><p><strong>取枚举和define的地址不合法</strong></p><p>如果不想让别人获得一个pointer或reference指向你的某个整数常量，enum可以帮助实现这个约束</p><ul><li>对于单纯常量，最后以const对象或者enums替换#defines</li><li>对于函数式宏（macros），最好给用inline函数替换#defines</li></ul>]]></content>
      
      
      <categories>
          
          <category> effective C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高效开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的工作方法</title>
      <link href="/2022/11/20/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/20/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="好用的工作方法-五段法"><a href="#好用的工作方法-五段法" class="headerlink" title="好用的工作方法-五段法"></a><img src="https://gitee.com/hanwenke/blogimage/raw/master/img/202211202213670.jpg" alt="ipad-desk">好用的工作方法-五段法</h1><h2 id="1·确认指令"><a href="#1·确认指令" class="headerlink" title="1·确认指令"></a>1·确认指令</h2><p>第一时间明确任务要求（目标、实施计划、收支预算等）-上级有回复，必须给上级回复，同时最后应由下级收尾</p><p>无法确认时，应与上级主管或相关人员沟通</p><h2 id="2·责任分工"><a href="#2·责任分工" class="headerlink" title="2·责任分工"></a>2·责任分工</h2><ol><li>落实每个人的职责和任务</li><li>快速投入落实执行、不等、不靠</li></ol><h2 id="3·节点把控"><a href="#3·节点把控" class="headerlink" title="3·节点把控"></a>3·节点把控</h2><ol><li>做完及时说，汇报节点</li><li>做得好及时说，周知成果进展</li><li>做得不好–及时寻求帮助</li></ol><h2 id="4·问题反馈"><a href="#4·问题反馈" class="headerlink" title="4·问题反馈"></a>4·问题反馈</h2><ol><li>发现新情况、准备新动做，第一时间向上汇报</li><li>有困难无解时第一时间求助同事，其次是上级，最后是上上级</li></ol><h2 id="5·成果复盘"><a href="#5·成果复盘" class="headerlink" title="5·成果复盘"></a>5·成果复盘</h2><ol><li>成果要有落实和存档</li><li>及时复盘（回顾，总结得失，经验教训）并向同事或其他部门进行分享</li><li>工作改进要有具体措施、要有制度保障、要有闭环机制</li></ol>]]></content>
      
      
      <categories>
          
          <category> 职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职场工作</title>
      <link href="/2022/11/19/%E8%81%8C%E5%9C%BA%E5%B7%A5%E4%BD%9C/"/>
      <url>/2022/11/19/%E8%81%8C%E5%9C%BA%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>邮件抄送顺序-按职位高低排序</p><p><img src="https://gitee.com/hanwenke/blogimage/raw/master/img/202211192329528.jpg" alt="street"></p><h2 id="汇报的形式"><a href="#汇报的形式" class="headerlink" title="汇报的形式"></a>汇报的形式</h2><h2 id="一页报告："><a href="#一页报告：" class="headerlink" title="一页报告："></a>一页报告：</h2><ol><li>用一页纸的形式，想清楚报告结论后，再动笔</li><li>采取倒叙的方式，先写结论，再写理由，最后写出行动建议<ol><li>报告形式：结论-理由分析-行动建议-附件</li></ol></li><li>把所有论证过程和资料作为报告附件</li><li>重点内容应以特殊字体/颜色标注，以提示阅读者</li></ol><h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ol><li>对数据进行归纳，分类、排序等</li><li>统计的数据尽可能用图表形式表现</li><li>用数字描述，做定量分析</li><li>有对比，更清晰：与自己比，与兄弟单位比，与同行比，与终极目标比</li></ol><h2 id="汇报方法："><a href="#汇报方法：" class="headerlink" title="汇报方法："></a>汇报方法：</h2><ol><li>找准汇报时间：<ol><li>短线工作即已落实及时汇报结果</li><li>长线工作已起步阶段汇报进展</li><li>工作遇到风险困难汇报寻求帮助</li></ol></li><li>明确汇报内容<ol><li>一般事项只说结果和重点</li><li>关注事项-详述过程和细节</li><li>困难事项分析提案和决策</li></ol></li><li>熟练使用汇报技巧<ol><li>层次条例清晰-一个要点一句话</li><li>预设问题先思考心中有数对答如流</li><li>有理有据有图表一目了然易理解</li></ol></li></ol><h2 id="复盘的方法"><a href="#复盘的方法" class="headerlink" title="复盘的方法"></a>复盘的方法</h2><ol><li>目标结果-找出初期设定的目标，对照实际达成的结果，对比看是否达成目标？如果没有，差异是多少</li><li>过程再线<ol><li>回顾全程，可分为几个阶段，每个阶段发生了什么关键事件？是如何应对的？</li></ol></li><li>得失分析<ol><li>分析过程中，哪些地方做得好？哪些地方做得不好？并要分析到每一个人</li></ol></li><li>规律总结<ol><li>认知方面，对于思考/解决问题的方法有哪些心得；对于某些事物的认知有哪些心得？实践方面，如果再次遇到类型的项目，事件或者问题，应该如何做</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11月7日</title>
      <link href="/2022/11/07/11%E6%9C%887%E6%97%A5/"/>
      <url>/2022/11/07/11%E6%9C%887%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p>今天又是加班的一天，晚上10点20多才打车回到家，之前听说互联网加班非常严重，没想到刚进公司没有几天就已经开始了加班的生活。</p><p>希望自己能够早点，熟悉业务，能够少加班，留有生活的空间。</p><p>在现在这个环境下，还是要坚持学习C++的基础，现在的环境，对于C++的基础以及数据结构的应用还是比较少的，所以还是要抽空，进行算法刷题，同时C++基础的视频和教程也要不断的学习，熟悉。</p>]]></content>
      
      
      <categories>
          
          <category> 每日小记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何累身不累心</title>
      <link href="/2022/11/06/%E5%A6%82%E4%BD%95%E7%B4%AF%E8%BA%AB%E4%B8%8D%E7%B4%AF%E5%BF%83/"/>
      <url>/2022/11/06/%E5%A6%82%E4%BD%95%E7%B4%AF%E8%BA%AB%E4%B8%8D%E7%B4%AF%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>在这里我看到是我们如何保持活力，即使身体很累，但依然保持心里的能量很足，而不是从内而外感到很疲惫。</p><p>在《冯唐的成事心法》-智慧篇中分享了三点。</p><h1 id="第一点：放自诀"><a href="#第一点：放自诀" class="headerlink" title="第一点：放自诀"></a><strong>第一点：放自诀</strong></h1><p>在生活中有时候我们自己会有这样的一个现象，周末是休息日，自己一个人在家躺在床上周末玩手机，刷抖音什么也没有干、还有另外一种情况，这个周末特别忙，忙着和朋友去跑10公里，去徒步，去搬家，去做体力劳动。</p><p>这两种情况，到周一的时候我们就会有明显的感知，特别忙的时候是比自己一个人躺在床上周末玩一周末的手机更有精神和活力的。</p><p>那在这里我–我想到，我们看似躺在床上什么也没有做，但事实上是我们的心里有非常的多的念头，而这种念头不断的消耗我们的能量，而非常忙的活动或者体力、脑力劳动也好在做这些事情的时候，恰恰是我们专注的时刻，导致我们的念头很少，所以我们周内上班的时候发现自己特别有活力。</p><h2 id="怎么去放空-有什么样的方式方法"><a href="#怎么去放空-有什么样的方式方法" class="headerlink" title="怎么去放空-有什么样的方式方法"></a>怎么去放空-有什么样的方式方法</h2><h3 id="1·勤劳而且憩息-干完一天的活，好好睡一觉，好好休息"><a href="#1·勤劳而且憩息-干完一天的活，好好睡一觉，好好休息" class="headerlink" title="1·勤劳而且憩息-干完一天的活，好好睡一觉，好好休息"></a>1·勤劳而且憩息-干完一天的活，好好睡一觉，好好休息</h3><h3 id="2·安于淡薄-默默做事"><a href="#2·安于淡薄-默默做事" class="headerlink" title="2·安于淡薄-默默做事"></a>2·安于淡薄-默默做事</h3><h3 id="3·读书-高声朗读"><a href="#3·读书-高声朗读" class="headerlink" title="3·读书-高声朗读"></a>3·读书-高声朗读</h3><h3 id="4·给自己三个空间"><a href="#4·给自己三个空间" class="headerlink" title="4·给自己三个空间"></a>4·给自己三个空间</h3><ol><li>​    书房-可以在书房里高声朗读，朗读别人的诗，朗读自己的诗，朗读别人的文章，朗读自己的文章-把心打开，把心方空</li><li>卧室-睡觉的地方，自己特别累，找个自己舒服的地方</li><li>重症病房-在重症病房看看-发现自己不缺胳膊少腿，可以好好吃饭，睡觉不生病，就非常nice</li></ol><h1 id="第二点-活自决-越规律越长久"><a href="#第二点-活自决-越规律越长久" class="headerlink" title="第二点-活自决-越规律越长久"></a>第二点-活自决-越规律越长久</h1><p>心常用则活-脑子越用越灵活</p><p>当我们与别人沟通有问题的时候，当我们处理问题不妥当的时候，我们 就需要不断的去思考怎么去处理，同时思考完了之后，就要立刻去行动，在行动中不断的去改变去改造，越来越好，越来越成熟</p><h1 id="第三点-简字诀"><a href="#第三点-简字诀" class="headerlink" title="第三点-简字诀"></a>第三点-简字诀</h1><p><strong>一本经，一本好经，多翻，是远强于你翻10本经。特别是多实践，实践完了再翻书，再看看书，知行合一</strong></p><p>生活中用得着得道理非常简单也就那么几句，但我们做不到，如果我们做到就已经超越了80%的</p><p>在生活中–践行简单的道理，比如坚持锻炼，按时吃饭，早睡早期，每天坚持阅读，坚持一年，坚持两年，坚持10年，这些都是非常简单的道理，可在生活中没有几个人能够做到。</p><p>三岁孩儿虽得道，八十老人行不得</p><p>简单的道理坚持去做</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 冯唐成事心法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些美妙的词句</title>
      <link href="/2022/11/06/%E7%BE%8E%E5%A6%99%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
      <url>/2022/11/06/%E7%BE%8E%E5%A6%99%E7%9A%84%E5%8F%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>你如何度过一天，你就会如何度过一生</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 好的句子与哲理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浙江大华电话第一轮面试</title>
      <link href="/2022/10/28/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%8D%8E%E7%94%B5%E8%AF%9D%E7%AC%AC%E4%B8%80%E8%BD%AE%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/10/28/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%8D%8E%E7%94%B5%E8%AF%9D%E7%AC%AC%E4%B8%80%E8%BD%AE%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的基础知识"><a href="#C-的基础知识" class="headerlink" title="C++的基础知识"></a>C++的基础知识</h1><h2 id="1·多态"><a href="#1·多态" class="headerlink" title="1·多态"></a>1·多态</h2><ol><li><p>什么是多态-多态就是同一类事务的不同表表现形式，比如说汽车是一个大类，那么下面他又不同的型号，不同的品牌的汽车</p></li><li><p>多态实现的三个必要条件</p><ol><li>继承–派生类继承基类</li><li>重写、虚函数</li><li>父类的引用或者指针–指向派生类的对象</li></ol></li><li><p>虚函数</p><ol><li><p>存在一个虚函数表，虚函数表保存在.rodata段，只读数据段</p></li><li><p>每个对象的头部都保存了一个虚表指针，指向虚函数的地址</p></li><li><p>虚指针保存在什么地方，保存在头部或者尾部-为什么保存在头部或者尾部，因为是基类指针，指向派生类对象，如果放在中间的化，派生类先析构掉了，而基类就无法析构掉</p></li></ol></li></ol><h2 id="2·线程"><a href="#2·线程" class="headerlink" title="2·线程"></a>2·线程</h2><ol><li>线程是程序执行的一种路径</li><li>thread t创建一个线程</li><li>Join和detach的区别<ol><li>join是将线程加入到主线程中来，等待加入的线程结束，主线程再结束</li><li>detach是将线程分离出去，不再管对应的线程</li></ol></li></ol><h2 id="3·进程"><a href="#3·进程" class="headerlink" title="3·进程"></a>3·进程</h2><p>进程就是一个正在运行的程序</p><p>fork一个子进程怎么知道子进程是否结束–wait()获取子进程的退出码</p><p>最后Init收养 孤儿（父进程先于子进程结束）进程</p><h3 id="1·fork子进程和父进程的空间是否是同一块"><a href="#1·fork子进程和父进程的空间是否是同一块" class="headerlink" title="1·fork子进程和父进程的空间是否是同一块"></a>1·fork子进程和父进程的空间是否是同一块</h3><p>变量：子进程和父进程–是否是同一块内存不是同一块内存</p><p>那为什么打印的内存地址是一样的~那是因为在底层中，物理内存会被分为多个页面，而变量的在页面中的偏移量是相同的，所以导致地址是相同的</p><p>子进程和父进程只是拥有和父进程相同的页表，其中页表指向内存中的代码段部分不会改变，而指向数据段、堆栈，栈段的会再我们将要改变父子进程各自的这部分内容是使用时会将要操作的部分进行复制</p><h2 id="4·进程间的通信方式"><a href="#4·进程间的通信方式" class="headerlink" title="4·进程间的通信方式"></a>4·进程间的通信方式</h2><ol><li>管道：–写入管道的数据都在内存中<ul><li>有名管道可以在任意进程间使用，无名主要在父子进程间使用</li></ul></li><li>信号量–临界区资源同一是捷克，只允许一个进程或线程访问的资源<ul><li>原子减1 P 获取资源，原子加1 V释放资源</li></ul></li><li>共享内存–先在物理内存上申请一块空间，多个进程可以将其映射到自己的虚拟地址空间中–所做的改动可以立刻被其它进程看到<ul><li>shamget（）用于创建或者获取共享内存</li></ul></li><li>消息队列<ul><li>消息队列中的内容时一个结构体  <ul><li>第一个变量是  &gt;=1的</li><li>后面的内容自定义</li></ul></li></ul></li></ol><h2 id="5·线程死锁"><a href="#5·线程死锁" class="headerlink" title="5·线程死锁"></a>5·线程死锁</h2><p>例如：相当于是 要学习A课程必须先学习C，而学习C课程要先学习A课程</p><p>这样两个都在等待对方先释放资源，就形成了线程间的死锁</p><h3 id="怎么在Linux下判断是否发生了线程死锁呢"><a href="#怎么在Linux下判断是否发生了线程死锁呢" class="headerlink" title="怎么在Linux下判断是否发生了线程死锁呢"></a>怎么在Linux下判断是否发生了线程死锁呢</h3><ol><li>先通过ps 查看当前进程的运行状态和PID</li><li>通过TOP 命令查看线程内每个线程的具体运行情况–线程进入阻塞状态CPU的占用率比较低，排序死循环的问题</li><li>通过GDB调试，答应每个线程的调用堆栈信息–gdb attach 1953</li><li></li></ol><h2 id="6·const-int-和int-const-的区别"><a href="#6·const-int-和int-const-的区别" class="headerlink" title="6·const int  和int const 的区别"></a>6·const int <em> 和int const </em>的区别</h2><ul><li>const int *          const 修饰的是所指之物–即内容不可以改变</li><li>int const *          cosnt 修饰的是指针变量–不能够指向其它对象</li></ul><h2 id="7·引用和指针的区别"><a href="#7·引用和指针的区别" class="headerlink" title="7·引用和指针的区别"></a>7·引用和指针的区别</h2><ol><li>指针是存放某个对象的地址；而引用则是对象的别名</li><li>程序为指针变量分配内存；引用不会分配内存</li><li>指针解引用需要加* ；引用不需要</li><li>指针可以指向不同的对象的地址；而引用只能绑定一个对象的地址，之后无法改变</li><li>指针变量可以初始化为空；而引用没有所谓的空引用</li><li>指针需要在作为形参的时候需要判断其合法性是否为空；引用不需要</li><li>对指针sizeof（）得到的是指针的大小；对引用则是变量的大小</li><li>指针可以有2级指针，3级指针；引用没有</li><li>++指针是指向下个对象的地址；++引用则是作用于对象本身</li><li>不可以对局部变量以指针或者引用的形式返回–声明周期</li></ol><p>如果从汇编角度来看–C++的引用底层就是调用的指针，引用时先获取该变量或者对象的地址，再进行对应的操作</p><h2 id="8·string-底层实现原理"><a href="#8·string-底层实现原理" class="headerlink" title="8·string 底层实现原理"></a>8·string 底层实现原理</h2><h2 id="9·map的数据结构"><a href="#9·map的数据结构" class="headerlink" title="9·map的数据结构"></a>9·map的数据结构</h2><ul><li>无序map–哈希表<ul><li>哈希map主要由数组和链表组成，数组是hashmap的主体，链表主要是为了解决hash冲突而存在，如果定位到的数组位置不含链表，那么对于查很早，条件操作很快一次寻址，如果存在链表，对于添加操作，他的时间复杂度为o(n)</li></ul></li><li>有序map–红黑树<ul><li>按照字典序排序，查找的时间复杂度为Olog(n)</li></ul></li></ul><h2 id="10·智能指针"><a href="#10·智能指针" class="headerlink" title="10·智能指针"></a>10·智能指针</h2><h3 id="智能指针解决的问题"><a href="#智能指针解决的问题" class="headerlink" title="智能指针解决的问题"></a>智能指针解决的问题</h3><ul><li>忘记释放资源，导致内存泄漏</li><li>同一资源释放多次，导致释放野指针，程序崩溃</li><li>写了释放资源代码，–中间return 掉了未执行到程序</li><li>代码运行过程中发生异常，随着异常栈展开，导致释放 资源的代码未执行到</li></ul><h3 id="C-11中的智能指针"><a href="#C-11中的智能指针" class="headerlink" title="C++11中的智能指针"></a>C++11中的智能指针</h3><h3 id="不带计数引用的智能指针"><a href="#不带计数引用的智能指针" class="headerlink" title="不带计数引用的智能指针"></a>不带计数引用的智能指针</h3><ul><li>auto_ptr–只有最后一个auto_ptr持有指针原来的资源，原来的auto_ptr都被赋予了nullptr<ul><li>auto_ptr如果在容器中使用，那么进行拷贝之后，之前的指针为空，再次访问就成为空指针-程序奔溃</li></ul></li><li>scoped_ptr–私有化了拷贝构造和operator=赋值函数，因此从根本上杜绝了浅拷贝的发生，所以scoped_ptr不能够用在容器中</li><li>unique_ptr–unique_ptr去掉了拷贝构造函数和operator=赋值重载函数，禁止用户对unique_ptr进行显示的拷贝构造和赋值，防止智能指针浅拷贝问题的发生<ul><li><strong>提供了带右值引用参数的拷贝构造和赋值</strong></li></ul></li></ul><h3 id="带引用计数的智能指针"><a href="#带引用计数的智能指针" class="headerlink" title="带引用计数的智能指针"></a>带引用计数的智能指针</h3><ul><li>shared_ptr–保存在堆内存上<ul><li>当允许多个智能指针指向同一个资源的时候，每个智能指针都会给资源的引用计数+1，当一个智能指针析构时，同样会使引用计数减去1，这样最后一个引用计数从1减到0的时候说明资源就该释放了</li></ul></li><li>weak_ptr–弱指针指针只是观察者不计数，它的计数只是观察者的计数</li></ul><h3 id="智能指针的实现"><a href="#智能指针的实现" class="headerlink" title="智能指针的实现"></a>智能指针的实现</h3><h3 id="智能指针设计的原理"><a href="#智能指针设计的原理" class="headerlink" title="智能指针设计的原理"></a>智能指针设计的原理</h3><p>利用栈上的对象出作用域自动析构这个特点，再智能指针的析构函数中释放资源</p><h3 id="智能指针的交叉引用"><a href="#智能指针的交叉引用" class="headerlink" title="智能指针的交叉引用"></a>智能指针的交叉引用</h3><ul><li>定义对象时用强智能指针，用强智能指针，在其它地方引用时，使用弱智能指针</li></ul><h2 id="11·设计模式"><a href="#11·设计模式" class="headerlink" title="11·设计模式"></a>11·设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h2 id="12·strcpy-和memorcy的区别"><a href="#12·strcpy-和memorcy的区别" class="headerlink" title="12·strcpy 和memorcy的区别"></a>12·strcpy 和memorcy的区别</h2><h3 id="strcpy是按位进行拷贝–无法指定大小"><a href="#strcpy是按位进行拷贝–无法指定大小" class="headerlink" title="strcpy是按位进行拷贝–无法指定大小"></a>strcpy是按位进行拷贝–无法指定大小</h3><h3 id="memorcy是可以指定拷贝多大"><a href="#memorcy是可以指定拷贝多大" class="headerlink" title="memorcy是可以指定拷贝多大"></a>memorcy是可以指定拷贝多大</h3><h2 id="13·C-堆和栈的区别"><a href="#13·C-堆和栈的区别" class="headerlink" title="13·C++堆和栈的区别"></a>13·C++堆和栈的区别</h2><h3 id="栈-是由系统自动分配"><a href="#栈-是由系统自动分配" class="headerlink" title="栈-是由系统自动分配"></a>栈-是由系统自动分配</h3><h3 id="堆是由程序员控制"><a href="#堆是由程序员控制" class="headerlink" title="堆是由程序员控制"></a>堆是由程序员控制</h3><h2 id="14·C-的内存分为几个区"><a href="#14·C-的内存分为几个区" class="headerlink" title="14·C++的内存分为几个区"></a>14·C++的内存分为几个区</h2><ul><li>代码区</li><li>.data区–</li></ul><h2 id="15·什么是虚函数"><a href="#15·什么是虚函数" class="headerlink" title="15·什么是虚函数"></a>15·什么是虚函数</h2><h2 id="16·虚函数可以用在构造函数和析构函数上嘛"><a href="#16·虚函数可以用在构造函数和析构函数上嘛" class="headerlink" title="16·虚函数可以用在构造函数和析构函数上嘛"></a>16·虚函数可以用在构造函数和析构函数上嘛</h2><h2 id="17·new和malloc的区别"><a href="#17·new和malloc的区别" class="headerlink" title="17·new和malloc的区别"></a>17·new和malloc的区别</h2><h2 id="18·TCP中的三次握手，四次挥手，流量控制，拥塞控制"><a href="#18·TCP中的三次握手，四次挥手，流量控制，拥塞控制" class="headerlink" title="18·TCP中的三次握手，四次挥手，流量控制，拥塞控制"></a>18·TCP中的三次握手，四次挥手，流量控制，拥塞控制</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ol><li>利用滑动窗口来控制–避免发送速度过快，让对方来的急接收</li></ol><h3 id="拥塞控制-慢启动、拥塞避免、快速重传、快速恢复（防止过多的数据注入到网络中，避免出现网络负载过大的情况）"><a href="#拥塞控制-慢启动、拥塞避免、快速重传、快速恢复（防止过多的数据注入到网络中，避免出现网络负载过大的情况）" class="headerlink" title="拥塞控制-慢启动、拥塞避免、快速重传、快速恢复（防止过多的数据注入到网络中，避免出现网络负载过大的情况）"></a>拥塞控制-慢启动、拥塞避免、快速重传、快速恢复（防止过多的数据注入到网络中，避免出现网络负载过大的情况）</h3><ol><li>传数据的时候从-小的开始-逐步增大–当网络出现拥塞时–执行慢算法-从1开始</li><li>当发送方连续收到三个重复确认时，执行乘法减小</li></ol><h2 id="19·socket网络编程的基本流程"><a href="#19·socket网络编程的基本流程" class="headerlink" title="19·socket网络编程的基本流程"></a>19·socket网络编程的基本流程</h2><h3 id="TCP服务端的编程流程是："><a href="#TCP服务端的编程流程是：" class="headerlink" title="TCP服务端的编程流程是："></a>TCP服务端的编程流程是：</h3><ol><li>创建一个socket，用函数socket();</li><li>设置socket属性，用函数setsocket();</li><li>绑定IP地址，端口等信息到socket上，用bind（）</li><li>开启监听，用函数Listen()</li><li>接收客户端的数据用accept();</li><li>收发数据，用函数send()和recv()</li><li>关闭网络连接</li><li>关闭监听</li></ol><h3 id="TCP客户端的基本流程"><a href="#TCP客户端的基本流程" class="headerlink" title="TCP客户端的基本流程"></a>TCP客户端的基本流程</h3><ol><li>设置socket属性，用函数setsocket();</li><li>绑定IP地址，端口等信息到socket上，用bind（）</li><li>设置要连接的对方的IP地址和端口属性</li><li>连接服务器，用connect()</li><li>发送数据，用函数send()和recv()</li><li>关闭网络连接、</li></ol><h2 id="20·IO-复用函数，poll-epoll的区别以"><a href="#20·IO-复用函数，poll-epoll的区别以" class="headerlink" title="20·IO 复用函数，poll,epoll的区别以"></a>20·IO 复用函数，poll,epoll的区别以</h2><h2 id="21·线程间的同步方式"><a href="#21·线程间的同步方式" class="headerlink" title="21·线程间的同步方式"></a>21·线程间的同步方式</h2><h3 id="线程互质"><a href="#线程互质" class="headerlink" title="线程互质"></a>线程互质</h3><ol><li>互斥锁</li><li>原子操作</li></ol><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ol><li>信号量</li><li>条件变量</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2022/10/27/%E6%9D%82%E8%AE%B0/"/>
      <url>/2022/10/27/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgse.com/i/OG9jMQ"><img src="https://s1.ax1x.com/2022/05/09/OG9jMQ.md.jpg" alt="OG9jMQ.jpg" border="0" /></a><br>10月初入职新公司，开始上岗前的学习。<br>没想到因为疫情的影响，10月份整个月工作了不到10天。<br>下个月还要开始交房租~已经5个月没有工作了。<br>希望疫情早点过去，能够早日正常工作.</p><p>今天本来应该是正常上班的一天，居家隔离，搭建自己的博客，以后就在这里记录自己的新路历程吧</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
